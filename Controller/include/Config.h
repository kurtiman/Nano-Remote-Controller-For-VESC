#ifndef _TX_CONFIG_H
#define _TX_CONFIG_H
#include <Arduino.h>
#include <avr/pgmspace.h>
#include <avr/wdt.h>

class CONTROLLER;

//Arduino NANO with NRF24 built-in.
//#define BUILT_IN_NRF24
#ifdef BUILT_IN_NRF24
const uint8_t PIN_CE = 0x0a;
const uint8_t PIN_CS = 0x09;
#else
const uint8_t PIN_CE = 0x09;
const uint8_t PIN_CS = 0x0a;
#endif

const unsigned char startupIcon[] PROGMEM = {
0x00, 0xe0, 0x03, 0x00, 0x00, 0xfe, 0x3f, 0x00,
  0x00, 0xff, 0xff, 0x00, 0xc0, 0xcf, 0xff, 0x03,
  0xe0, 0xc3, 0xff, 0x07, 0xf0, 0xf9, 0xff, 0x0f,
  0xf8, 0xfe, 0xff, 0x1f, 0x78, 0xff, 0xff, 0x1f,
  0xbc, 0xff, 0xff, 0x3f, 0xdc, 0x1f, 0xfe, 0x3f,
  0xce, 0xdf, 0xfe, 0x3f, 0xee, 0x5f, 0xfe, 0x3f,
  0xee, 0x1f, 0xfe, 0x0f, 0xef, 0x9f, 0xff, 0x07,
  0xe7, 0xff, 0xff, 0x01, 0xe7, 0xff, 0xff, 0x00,
  0xff, 0xff, 0x1f, 0x00, 0xff, 0x47, 0x00, 0x00,
  0xff, 0x43, 0x00, 0x05, 0xff, 0x43, 0xc0, 0x1d,
  0xfe, 0x47, 0xf0, 0x7d, 0xfe, 0xff, 0xd0, 0x5d,
  0xfc, 0xbf, 0xf0, 0x7d, 0xfc, 0xe1, 0x00, 0x00,
  0x00, 0x40, 0xf0, 0x7d, 0x00, 0x40, 0xf0, 0x7d,
  0x00, 0xe0, 0xe0, 0x3d, 0x00, 0xf0, 0xe1, 0x3d,
  0x00, 0x10, 0xc1, 0x1d, 0x00, 0xf0, 0x81, 0x0d,
  0x00, 0xe0, 0x00, 0x00
};
const unsigned char settingIcon[] PROGMEM = {
  0x00, 0xc0, 0x00, 0x00, 0xe0, 0x01, 0x00, 0xfc,
  0x0f, 0x00, 0x3c, 0x0f, 0x00, 0x18, 0x06, 0x00,
  0x18, 0x06, 0x00, 0x3c, 0x0f, 0x00, 0xfc, 0x0f,
  0x60, 0xe0, 0x01, 0xf8, 0xc1, 0x00, 0xfe, 0x07,
  0x00, 0x0e, 0x07, 0x00, 0x66, 0x06, 0x00, 0xf7,
  0x0e, 0x00, 0xf7, 0x0e, 0x00, 0x66, 0x06, 0x00,
  0x0e, 0x07, 0x00, 0xfe, 0x07, 0x00, 0xf8, 0x01,
  0x00, 0x60, 0x00, 0x00
};
const unsigned char gaugeIcon[] PROGMEM = {
  0xc0, 0x3f, 0x00, 0x30, 0xc0, 0x00, 0x08, 0x06,
  0x01, 0x24, 0x40, 0x02, 0x06, 0x00, 0x06, 0x02,
  0x00, 0x04, 0x0b, 0x00, 0x0d, 0x01, 0x00, 0x08,
  0x01, 0x00, 0x08, 0x05, 0x00, 0x0a, 0x01, 0x00,
  0x08, 0x01, 0x06, 0x08, 0x05, 0x06, 0x0a, 0x03,
  0x00, 0x04, 0x0c, 0x00, 0x03, 0x8c, 0x1f, 0x03
};
const unsigned char connectedIcon[] PROGMEM = {
  0x86, 0x01, 0xcc, 0x00, 0x78, 0x00, 0x31, 0x02,
  0x03, 0x03, 0xb6, 0x01, 0xb4, 0x00, 0x86, 0x01,
  0x33, 0x03, 0x79, 0x02
};
const unsigned char ConnectHigh[] PROGMEM = {
  0x86, 0x01, 0xcc, 0x00, 0x78, 0x00, 0x31, 0x00,
  0x03, 0x00, 0x36, 0x00, 0x34, 0x00, 0x06, 0x00,
  0x33, 0x00, 0x79, 0x00
};
const unsigned char ConnectLow[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x03, 0x00, 0x36, 0x00, 0x34, 0x00, 0x06, 0x00,
  0x33, 0x00, 0x79, 0x00
};
const unsigned char NotConnect[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00,
  0x30, 0x00, 0x78, 0x00
};
const unsigned char switchOnIcon[] PROGMEM = {
  0x00, 0x3e, 0x00, 0x77, 0xfe, 0x63, 0x03, 0x49,
  0xfe, 0x63, 0x00, 0x77, 0x00, 0x3e
};
const unsigned char switchOffIcon[] PROGMEM = {
  0x3e, 0x00, 0x77, 0x00, 0xe3, 0x3f, 0x41, 0x60,
  0xe3, 0x3f, 0x77, 0x00, 0x3e, 0x00
};

// Profile
const uint8_t PROFILE_NUM = 3;
const char PROFILE_NAME[PROFILE_NUM][16] = {
    "1-Board",
    "2-Board",
    "3-Board"
};

// Titles
const uint8_t SETTING_NUM = 16;
const char SETTING_TITLE[SETTING_NUM][15] = {
    "Profile",
    "Mode",
    "Battery Type",
    "Battery Series",
    "Motor Poles",
    "Motor Pulley",
    "Wheel Pulley",
    "Wheel Size",
    "Stepper",
    "Speed Limit",
    "HALL Center",
    "HALL Min",
    "HALL Max",
    "ADDR Generate",
    "ADDR Reset",
    "Save & Exit"
};

// Settings {default, min, max}
const short SETTING_RULE[SETTING_NUM][3] = {
    {1, 1, PROFILE_NUM},
    {1, 1, 3},
    {1, 1, 2},
    {12, 6, 13},
    {14, 7, 14},
    {13, 10, 30},
    {66, 25, 100},
    {203, 50, 250},
    {10, 1, 100},
    {15, 5, 60},
    {500, 1, 1023},
    {1, 1, 1023},
    {1000, 1, 1023},
    {-1, 0, 0},
    {1, 1, 2},
    {1, 1, 2}
};

struct DATA_EEPROM{
  uint8_t Profile;
  uint8_t Mode;
  uint16_t HallCenter;
  uint8_t HallMin;
  uint16_t HallMax;
  uint64_t addr[PROFILE_NUM];
};

struct DATA_RX{
  uint8_t BatteryType;
  uint8_t BatterySerie;
  uint8_t motorPoles;
  uint8_t motorPulley;
  uint8_t wheelPulley;
  uint8_t wheelSize;
  uint8_t Stepper;
  uint8_t SpeedLimit;
};

struct DATA_TX{
  uint8_t type;
  uint8_t BatteryType;
  uint8_t BatterySerie;
  uint8_t motorPoles;
  uint8_t motorPulley;
  uint8_t wheelPulley;
  uint8_t wheelSize;
  uint8_t Stepper;
  uint8_t SpeedLimit;
  uint64_t addr;
};

struct DATA_PACKET{
  uint8_t type;
  uint8_t mode;
  uint8_t trigger;
  uint16_t throttle;
};

struct DATA_VESC{
  uint8_t trigger;
  uint16_t throttle;
  float speed;
  float distance;
  int8_t tempFetFiltered;
  float inpVoltage;
  int8_t avgInputCurrent;
	int8_t ampHours;
	int8_t ampHoursCharged;
};

// R100k to VIN, to detect USB input.
const uint8_t PIN_R100K = A6;
// R10k to Battery, to measure voltage.
const uint8_t PIN_R10K = A3;
const uint8_t PIN_HALL = A0;
const uint8_t PIN_TRIGGER = 2;

const float BATT_MIN = 2.0;
const float BATT_MAX = 4.2;

const uint8_t MENU_MARGIN = 100;
const uint8_t SAFE_MARGIN = 25;

const uint16_t NEUTRAL = 1500;
const uint16_t P_MIN = 1000;
const uint16_t P_MAX = 2000;

const uint8_t LIMIT = 15;
const uint64_t DEFAULT_ADDR PROGMEM = 0xE1E1E1E1E1;
const int8_t DEFAULT_CHANNEL PROGMEM = 0x71;

#endif